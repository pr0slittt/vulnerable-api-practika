name: DevSecOps Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions:
  contents: read
  security-events: write # Требуется для Code Scanning

jobs:
  semgrep-sast:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies and jq
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          sudo apt-get update && sudo apt-get install -y jq
      - name: Install Semgrep CLI
        run: |
          pip install "semgrep>=1.76.0"
          semgrep --version
      - name: Run Semgrep SAST Scan (SARIF Output)
        id: semgrep_sarif_scan
        run: |
          SARIF_OUTPUT_PATH="${{ github.workspace }}/semgrep-results.sarif"
          semgrep \
            --config "p/python" \
            --config "p/security-audit" \
            --config "semgrep-rules/" \
            --sarif \
            -o "$SARIF_OUTPUT_PATH" \
            ./app \
            --verbose || true
      - name: Run Semgrep SAST Scan (JSON Output)
        id: semgrep_json_scan
        run: |
          JSON_OUTPUT_PATH="${{ github.workspace }}/semgrep-results.json"
          semgrep \
            --config "p/python" \
            --config "p/security-audit" \
            --config "semgrep-rules/" \
            --json \
            -o "$JSON_OUTPUT_PATH" \
            ./app \
            --verbose || true
      - name: Format Semgrep JSON to Table
        run: |
          TABLE_REPORT_PATH="${{ github.workspace }}/semgrep-table-report.txt"
          if [ -s "${{ github.workspace }}/semgrep-results.json" ]; then
            echo "Category | Rule ID | Severity | File | Line | Description" > "$TABLE_REPORT_PATH"
            echo "---------|---------|----------|------|------|-------------" >> "$TABLE_REPORT_PATH"
            jq -r '.results[] | select(.extra.severity) | "\(.extra.metadata.category // "N/A") | \(.check_id) | \(.extra.severity) | \(.path) | \(.start.line) | \(.extra.message)"' "${{ github.workspace }}/semgrep-results.json" | \
            sed 's/\n/ /g' | \
            sed 's/|/ \| /g' | \
            column -t -s '|' >> "$TABLE_REPORT_PATH"
            cat "$TABLE_REPORT_PATH"
          else
            echo "No Semgrep results found or JSON file is empty. Creating empty table report."
            echo "No Semgrep results found." > "$TABLE_REPORT_PATH"
          fi
        env:
          PYTHONUNBUFFERED: 1

      - name: Upload Semgrep SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'semgrep-results.sarif'
          wait-for-processing: true

      - name: Archive Semgrep Reports to single ZIP
        run: |
          SARIF_FILE="${{ github.workspace }}/semgrep-results.sarif"
          JSON_FILE="${{ github.workspace }}/semgrep-results.json"
          TABLE_FILE="${{ github.workspace }}/semgrep-table-report.txt"
          FILES_TO_ZIP=""
          if [ -f "$SARIF_FILE" ]; then FILES_TO_ZIP="$FILES_TO_ZIP $SARIF_FILE"; fi
          if [ -f "$JSON_FILE" ]; then FILES_TO_ZIP="$FILES_TO_ZIP $JSON_FILE"; fi
          if [ -f "$TABLE_FILE" ]; then FILES_TO_ZIP="$FILES_TO_ZIP $TABLE_FILE"; fi
          TEMP_ZIP_NAME="semgrep-reports-temp.zip"
          FINAL_ZIP_NAME="semgrep-all-reports.zip"
          if [ -n "$FILES_TO_ZIP" ]; then
            zip -j "$TEMP_ZIP_NAME" $FILES_TO_ZIP
            echo "Created $TEMP_ZIP_NAME with the following files:"
            unzip -l "$TEMP_ZIP_NAME"
          else
            echo "No Semgrep report files found to archive. Creating an empty zip file."
            touch "$TEMP_ZIP_NAME"
          fi
          mv "$TEMP_ZIP_NAME" "$FINAL_ZIP_NAME"
      - name: Upload Semgrep Reports ZIP Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-all-reports
          path: semgrep-all-reports.zip
          retention-days: 5

  grype-sca:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: ~/.grype/db
          key: ${{ runner.os }}-grype-db-${{ hashFiles('grype-db-version.txt') }}
          restore-keys: ${{ runner.os }}-grype-db-

      - name: Create Grype DB Version File
        run: echo "1" > grype-db-version.txt

      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sudo bash -s -- -b /usr/local/bin
          grype version
      - name: Run Grype SCA Scan (SARIF Output)
        id: grype_sarif_scan
        run: |
          SARIF_OUTPUT_PATH="${{ github.workspace }}/grype-results.sarif"
          grype dir:./app -o sarif --file "$SARIF_OUTPUT_PATH" || true
      - name: Run Grype SCA Scan (Table Output)
        run: |
          TABLE_REPORT_PATH="${{ github.workspace }}/grype-table-report.txt"
          grype dir:./app --format table > "$TABLE_REPORT_PATH" || true
          cat "$TABLE_REPORT_PATH"
      - name: Upload Grype SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'grype-results.sarif'
          wait-for-processing: true

      - name: Archive Grype Reports to single ZIP
        run: |
          SARIF_FILE="${{ github.workspace }}/grype-results.sarif"
          TABLE_FILE="${{ github.workspace }}/grype-table-report.txt"
          FILES_TO_ZIP=""
          if [ -f "$SARIF_FILE" ]; then FILES_TO_ZIP="$FILES_TO_ZIP $SARIF_FILE"; fi
          if [ -f "$TABLE_FILE" ]; then FILES_TO_ZIP="$FILES_TO_ZIP $TABLE_FILE"; fi
          TEMP_ZIP_NAME="grype-reports-temp.zip"
          FINAL_ZIP_NAME="grype-all-reports.zip"
          if [ -n "$FILES_TO_ZIP" ]; then
            zip -j "$TEMP_ZIP_NAME" $FILES_TO_ZIP
            echo "Created $TEMP_ZIP_NAME with the following files:"
            unzip -l "$TEMP_ZIP_NAME"
          else
            echo "No Grype report files found to archive. Creating an empty zip file."
            touch "$TEMP_ZIP_NAME"
          fi
          mv "$TEMP_ZIP_NAME" "$FINAL_ZIP_NAME"
      - name: Upload Grype Reports ZIP Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: grype-all-reports
          path: grype-all-reports.zip
          retention-days: 5

  checkov_iac_scan:
    name: Checkov IaC Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Checkov IaC Scan (SARIF Output)
        id: checkov_sarif_scan
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: dockerfile,kubernetes,terraform,cloudformation,arm,ansible,serverless
          output_format: sarif
          output_file_path: checkov_results.sarif/results_sarif.sarif

      - name: Run Checkov IaC Scan (CLI Output)
        run: |
          CLI_REPORT_PATH="${{ github.workspace }}/checkov-cli-report.txt"
          checkov --directory . \
                  --framework dockerfile,kubernetes,terraform,cloudformation,arm,ansible,serverless \
                  --output cli \
                  > "$CLI_REPORT_PATH" || true
          cat "$CLI_REPORT_PATH"
      - name: Upload Checkov SARIF to Code Scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov_results.sarif/results_sarif.sarif
          category: Checkov
          checkout_path: ${{ github.workspace }}
          wait-for-processing: true

      - name: Archive Checkov Reports to single ZIP
        run: |
          SARIF_FILE="${{ github.workspace }}/checkov_results.sarif/results_sarif.sarif"
          CLI_FILE="${{ github.workspace }}/checkov-cli-report.txt"
          FILES_TO_ZIP=""
          if [ -d "${{ github.workspace }}/checkov_results.sarif" ] && [ -f "$SARIF_FILE" ]; then
            FILES_TO_ZIP="$FILES_TO_ZIP $SARIF_FILE"
          else
            echo "SARIF file for Checkov not found or path is incorrect: $SARIF_FILE"
          fi
          if [ -f "$CLI_FILE" ]; then
            FILES_TO_ZIP="$FILES_TO_ZIP $CLI_FILE"
          else
            echo "CLI file for Checkov not found: $CLI_FILE"
          fi
          TEMP_ZIP_NAME="checkov-reports-temp.zip"
          FINAL_ZIP_NAME="checkov-all-reports.zip"
          if [ -n "$FILES_TO_ZIP" ]; then
            zip -j "$TEMP_ZIP_NAME" $FILES_TO_ZIP
            echo "Created $TEMP_ZIP_NAME with the following files:"
            unzip -l "$TEMP_ZIP_NAME"
          else
            echo "No Checkov report files found to archive. Creating an empty zip file."
            touch "$TEMP_ZIP_NAME"
          fi
          mv "$TEMP_ZIP_NAME" "$FINAL_ZIP_NAME"
      - name: Upload Checkov Reports ZIP Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkov-all-reports
          path: checkov-all-reports.zip
          retention-days: 5

  zap-dast:
    runs-on: ubuntu-latest
    needs: [semgrep-sast]
    steps:
      - uses: actions/checkout@v4

      - name: Start vulnerable API service
        run: |
          # Запускаем API (зависит от твоего проекта)
          docker-compose up -d

      - name: Wait for API to be available
        run: |
          # Проверяем доступность API (замени на нужный порт/URL)
          for i in {1..30}; do
            if curl -s http://localhost:8081/health; then
              echo "API is up"
              break
            fi
            echo "Waiting for API..."
            sleep 2
          done

      - name: Create ZAP Lua script dynamically
        run: |
          mkdir -p zap_scripts_to_mount
          cat <<'EOF' > zap_scripts_to_mount/leak_tokens_alert.lua
          function scanNode(as, msg)
            local uri = msg:getRequestHeader():getURI()
            if uri:getPath() and uri:getPath():match("/tokens") then
              local resp_body = msg:getResponseBody():toString()
              if resp_body and #resp_body > 0 then
                as.raiseAlert(2, 3, "Information Leak via /tokens endpoint",
                  "Endpoint /tokens возвращает чувствительную информацию, что может привести к утечке данных.",
                  msg:getRequestHeader():getURI():toString(),
                  "", "", resp_body, 0, 0, msg)
              end
            end
          end

          function scan(as, msg, param, value)
          end
          EOF

      - name: Run OWASP ZAP baseline scan with dynamic script
        run: |
          docker run --rm --network host \
            -v "${{ github.workspace }}:/zap/wrk/:rw" \
            -v "${{ github.workspace }}/zap_scripts_to_mount:/zap/scripts:rw" \
            ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t http://localhost:8081 \
            -r zap-report.html \
            -J zap-report.json \
            -x zap-report.xml \
            -I \
            -s all \
            -S "/zap/scripts/leak_tokens_alert.lua"

      - name: Upload ZAP reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: |
            zap-report.html
            zap-report.json
            zap-report.xml

      - name: Shutdown vulnerable API service
        if: always()
        run: |
          docker-compose down
