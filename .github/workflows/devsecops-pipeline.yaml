name: DevSecOps Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  security-scan:
    runs-on: ubuntu-latest

    services:
      # Пример: запускаем тестовое приложение на порту 8081 (если нужно)
      vulnerable-api:
        image: your-docker-image-for-api:latest
        ports:
          - 8081:8081
        options: >-
          --health-cmd "curl -f http://localhost:8081/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Wait for vulnerable API to be healthy
        run: |
          echo "Waiting for vulnerable API to be healthy..."
          for i in {1..30}; do
            curl --fail http://localhost:8081/health && break
            sleep 5
          done

      - name: Run OWASP ZAP Baseline Scan
        run: |
          docker run --rm -v ${{ github.workspace }}:/zap/wrk/:rw --network host ghcr.io/zaproxy/zap2docker-stable zap-baseline.py \
            -t http://localhost:8081 \
            -J /zap/wrk/zap-report.json

      - name: Convert ZAP JSON to SARIF
        run: |
          python3 <<EOF
          import json
          def convert_zap_json_to_sarif(zap_json_path, sarif_path):
              with open(zap_json_path) as f:
                  zap_data = json.load(f)

              sarif = {
                  "version": "2.1.0",
                  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
                  "runs": [{
                      "tool": {"driver": {
                          "name": "OWASP ZAP",
                          "informationUri": "https://www.zaproxy.org/",
                          "rules": []
                      }},
                      "results": []
                  }]
              }
              rules = {}
              results = []

              for alert in zap_data.get("alerts", []):
                  rule_id = alert.get("alertId", alert.get("alert", "Unknown"))
                  if rule_id not in rules:
                      rules[rule_id] = {
                          "id": rule_id,
                          "name": alert.get("alert", ""),
                          "shortDescription": {"text": alert.get("alert", "")},
                          "helpUri": alert.get("reference", ""),
                          "properties": {"tags": ["security", "zap"]}
                      }
                  for instance in alert.get("instances", []):
                      location = {
                          "physicalLocation": {
                              "artifactLocation": {"uri": instance.get("uri", "")},
                              "region": {"startLine": 1}
                          }
                      }
                      results.append({
                          "ruleId": rule_id,
                          "message": {"text": alert.get("description", "")},
                          "locations": [location],
                          "level": "warning"
                      })

              sarif["runs"][0]["tool"]["driver"]["rules"] = list(rules.values())
              sarif["runs"][0]["results"] = results

              with open(sarif_path, "w") as f:
                  json.dump(sarif, f, indent=2)

          convert_zap_json_to_sarif("zap-report.json", "zap-report.sarif")
          EOF

      - name: Upload ZAP SARIF report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: zap-report.sarif
          token: ${{ secrets.GITHUB_TOKEN }}
