name: DevSecOps Pipeline

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      packages: write
      issues: write # Добавлено для потенциального создания issues при обнаружении уязвимостей (опционально)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Semgrep CLI
        run: |
          set -euxo pipefail
          # Проверяем, установлен ли Semgrep, если нет - устанавливаем
          if ! command -v semgrep &> /dev/null
          then
              echo "Semgrep not found, installing..."
              pip install "semgrep>=1.76.0"
          else
              echo "Semgrep already installed."
          fi
          semgrep --version

      - name: Run Semgrep SAST Scan
        id: semgrep_scan_run
        run: |
          set -euxo pipefail
          echo "Starting Semgrep CLI scan. PWD: $(pwd)"
          
          echo "Listing files in current directory (should contain semgrep-rules/):"
          ls -l .
          echo "Listing files in app/ directory:"
          ls -l ./app

          SARIF_OUTPUT_PATH="${{ github.workspace }}/semgrep-results.sarif"
          echo "Semgrep output path set to: $SARIF_OUTPUT_PATH"

          # Выполнение Semgrep с детальным логированием (используйте --debug или --verbose)
          # --verbose выводит информацию о загруженных правилах и пропусках
          semgrep \
            --config "p/python" \
            --config "p/security-audit" \
            --config "semgrep-rules/" \
            --sarif \
            -o "$SARIF_OUTPUT_PATH" \
            ./app \
            --verbose || true # Разрешаем шагу завершиться успешно, даже если Semgrep найдет проблемы
          
          SEMGREP_EXIT_CODE=$?
          echo "Semgrep scan finished. Raw exit code: $SEMGREP_EXIT_CODE"
          
          echo "semgrep_exit_code=$SEMGREP_EXIT_CODE" >> "$GITHUB_OUTPUT"

          if [ ! -f "$SARIF_OUTPUT_PATH" ]; then
            echo "ERROR: semgrep-results.sarif was NOT created by Semgrep!"
            exit 1
          else
            echo "Semgrep SARIF file created. Size: $(du -h "$SARIF_OUTPUT_PATH" | awk '{print $1}')"
            echo "First 100 lines of semgrep-results.sarif:"
            head -n 100 "$SARIF_OUTPUT_PATH"
          fi

      - name: Upload Semgrep SARIF results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'semgrep-results.sarif'
          wait-for-processing: true
          working-directory: ${{ github.workspace }} # Убедитесь, что этот путь актуален

      - name: Upload Semgrep SARIF as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-sarif-report
          path: semgrep-results.sarif
          retention-days: 5

      - name: Cache Grype DB
        uses: actions/cache@v3
        with:
          path: ~/.grype/db
          key: ${{ runner.os }}-grype-db-${{ hashFiles('grype-db-version.txt') }}
          restore-keys: |
            ${{ runner.os }}-grype-db-
      - name: Create Grype DB Version File
        run: echo "1" > grype-db-version.txt

      - name: Download Grype
        run: |
          set -euxo pipefail
          if ! command -v grype &> /dev/null
          then
              echo "Grype not found, downloading..."
              curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sudo bash -s -- -b /usr/local/bin
          else
              echo "Grype binary already exists."
          fi
          grype version

      - name: Run Grype SCA Scan and Save SARIF
        id: grype_scan_run
        run: |
          set -euxo pipefail
          echo "Starting Grype scan. PWD: $(pwd)"
          GRYPE_OUTPUT_PATH="${{ github.workspace }}/grype-results.sarif"
          echo "Grype output path set to: $GRYPE_OUTPUT_PATH"
          grype dir:./app -o sarif --file "$GRYPE_OUTPUT_PATH" || true
          
          GRYPE_EXIT_CODE=$?
          echo "Grype scan finished. Raw exit code: $GRYPE_EXIT_CODE"
          echo "grype_exit_code=$GRYPE_EXIT_CODE" >> "$GITHUB_OUTPUT"

          if [ ! -f "$GRYPE_OUTPUT_PATH" ]; then
            echo "ERROR: grype-results.sarif was NOT created by Grype!"
            exit 1
          fi

      - name: Upload SARIF results to GitHub Security tab (Grype)
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'grype-results.sarif'
          wait-for-processing: true
          working-directory: ${{ github.workspace }} # Убедитесь, что этот путь актуален

      - name: Upload Grype SARIF as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: grype-sarif-report
          path: grype-results.sarif
          retention-days: 5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          docker build -t vulnerable-api:latest .

      - name: Run Trivy Container Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'vulnerable-api:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
        continue-on-error: true

      - name: Upload Trivy SARIF results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          wait-for-processing: true

      - name: Upload Trivy SARIF as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-sarif-report
          path: trivy-results.sarif
          retention-days: 5

      # --- НАЧАЛО: Интеграция OWASP ZAP DAST ---
      - name: Start Vulnerable API (vAPI.py) in background
        run: |
          echo "Starting vAPI.py in background..."
          # Запускаем приложение в фоне, перенаправляя вывод в лог-файл
          nohup python ./app/vAPI.py > vapi_output.log 2>&1 &
          VAPI_PID=$!
          echo "vAPI.py started with PID: $VAPI_PID"
          echo "$VAPI_PID" > vapi_pid.txt # Сохраняем PID для последующей остановки
          
          # Health check loop for vAPI.py (увеличенное количество попыток и время ожидания)
          echo "Waiting for vAPI.py to be accessible at http://localhost:8081..."
          for i in $(seq 1 30); do # Попытаемся до 30 раз с интервалом 5 секунд (всего 150 секунд)
            if curl --output /dev/null --silent --head --fail http://localhost:8081; then
              echo "vAPI.py is up and running!"
              break
            else
              echo "vAPI.py not yet available, waiting 5 seconds... (Attempt $i/30)"
              sleep 5
            fi
            if [ $i -eq 30 ]; then
              echo "ERROR: vAPI.py did not start within the expected time. Check vapi_output.log for details."
              cat vapi_output.log # Выводим лог, чтобы помочь в отладке
              exit 1 # Проваливаем пайплайн, если API не запустилось
            fi
          done

      - name: Log in to Docker Hub (Optional, for public image resilience)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} # Рекомендуется использовать секрет
          password: ${{ secrets.DOCKERHUB_TOKEN }} # Рекомендуется использовать секрет
        continue-on-error: true # Позволяем пайплайну продолжать, даже если вход не удался

      - name: Create ZAP Reports Directory
        run: mkdir -p zap-results # Создаем директорию для отчетов ZAP

      - name: Run OWASP ZAP Baseline Scan (GitHub Action)
        id: run_owasp_zap_scan # Изменено ID шага
        uses: zaproxy/action-baseline@v0.12.0 # Используем официальный GitHub Action для ZAP
        with:
          target: 'http://localhost:8081' # Целевой URL вашего приложения
          # Включаем вывод отчетов в форматах SARIF, HTML и JSON в новую директорию
          sarif_filepath: 'zap-results/zap-baseline-report.sarif'
          html_filepath: 'zap-results/zap-baseline-report.html'
          json_filepath: 'zap-results/zap-baseline-report.json'
          # Опционально: Завершать работу с ошибкой, если ZAP находит предупреждения или ошибки
          # issues_as_errors: true 
          # cmd_options: '-config rules.conf' # Дополнительные опции ZAP CLI (если нужны)
        continue-on-error: true # Позволяем пайплайну продолжать, даже если ZAP найдет уязвимости

      - name: Upload ZAP SARIF results to GitHub Security
        if: always() # Загружаем отчет, даже если предыдущие шаги ZAP завершились с ошибкой
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'zap-results/zap-baseline-report.sarif' # Обновлен путь к SARIF файлу
          wait-for-processing: true
          # УДАЛЕНО: working-directory: ${{ github.workspace }} # Этот параметр не нужен и вызывает ошибку

      - name: Upload ZAP HTML/JSON Reports as Artifact
        if: always() # Загружаем артефакты, даже если предыдущие шаги завершились с ошибкой
        uses: actions/upload-artifact@v4
        with:
          name: OWASP ZAP Reports # Изменено имя артефакта
          path: |
            zap-results/zap-baseline-report.html # Обновлен путь
            zap-results/zap-baseline-report.json # Обновлен путь
          retention-days: 5 # Хранить артефакт 5 дней

      - name: Stop Vulnerable API (Cleanup)
        if: always() # Этот шаг должен выполняться всегда, чтобы остановить процесс
        run: |
          if [ -f vapi_pid.txt ]; then
            VAPI_PID=$(cat vapi_pid.txt)
            echo "Stopping vAPI.py with PID: $VAPI_PID"
            kill $VAPI_PID || true # Пытаемся мягко остановить
            sleep 2 # Даем время на остановку
            if ps -p $VAPI_PID > /dev/null; then
              echo "Process $VAPI_PID is still running, forcing kill."
              kill -9 $VAPI_PID || true # Принудительно убиваем, если не остановился
            else
              echo "Process $VAPI_PID stopped successfully."
            fi
            rm vapi_pid.txt # Удаляем файл с PID
          else
            echo "vapi_pid.txt not found, possibly vAPI.py was not started or already stopped."
          fi
          if [ -f vapi_output.log ]; then
            echo "--- vAPI.py Output Log ---"
            cat vapi_output.log # Выводим лог работы API для отладки
            echo "--- End of vAPI.py Output Log ---"
          fi
      # --- КОНЕЦ: Интеграция OWASP ZAP DAST ---
