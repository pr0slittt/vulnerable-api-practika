name: DevSecOps Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions:
  contents: read
  security-events: write

jobs:

  # STATIC ANALYSIS WITH SEMGREP
  semgrep-sast:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          sudo apt-get update && sudo apt-get install -y jq
          pip install semgrep

      - name: Run Semgrep
        run: |
          semgrep --config "p/security-audit" \
                  --config "p/python" \
                  --config "semgrep-rules/" \
                  --sarif -o semgrep-results.sarif ./app || true

      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif

  # SOFTWARE COMPOSITION ANALYSIS WITH GRYPE
  grype-sca:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sudo bash -s -- -b /usr/local/bin
      - name: Run Grype
        run: |
          grype dir:./app -o sarif --file grype-results.sarif || true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: grype-results.sarif

  # INFRASTRUCTURE AS CODE ANALYSIS WITH CHECKOV
  checkov_iac_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          output_format: sarif
          output_file_path: checkov_results.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov_results.sarif

  # IMAGE SCAN WITH TRIVY
  docker-build-and-trivy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t vulnerable-api:latest .
      - name: Install Trivy
        run: curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo bash -s -- -b /usr/local/bin
      - name: Run Trivy
        run: |
          trivy image vulnerable-api:latest \
            --format sarif \
            --output trivy-results.sarif \
            --severity LOW,MEDIUM,HIGH,CRITICAL || true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

  # DYNAMIC ANALYSIS WITH ZAP + CUSTOM RULES
  zap-dast:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create Docker network
        run: docker network create zap-net || true

      - name: Run vulnerable-api container
        run: |
          docker run -d --rm --network zap-net --name vulnerable-api \
            -p 8081:8081 \
            ghcr.io/pr0slittt/vulnerable-api-practika:latest

      - name: Wait for API readiness
        run: |
          for i in {1..15}; do
            if curl -s http://localhost:8081; then
              echo "API is up"
              break
            else
              echo "Waiting for API..."
              sleep 2
            fi
          done

      - name: Prepare custom ZAP scripts
        run: |
          mkdir -p zap_scripts_to_mount
          cp -r zap-rules/* zap_scripts_to_mount/

      - name: Run ZAP full scan with custom rules
        run: |
          docker run --rm --network host \
            -v "${{ github.workspace }}:/zap/wrk/" \
            -v "$(pwd)/zap_scripts_to_mount:/zap/scripts:rw" \
            ghcr.io/zaproxy/zaproxy:stable zap-full-scan.py \
              -t http://localhost:8081 \
              -r zap-report.html \
              -J zap-report.json \
              -x zap-report.xml \
              -I \
              -s all

      - name: Upload ZAP Reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: |
            zap-report.html
            zap-report.json
            zap-report.xml
