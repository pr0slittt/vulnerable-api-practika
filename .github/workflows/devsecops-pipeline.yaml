name: OWASP ZAP Scan

on:
  push:
    branches:
      - main

jobs:
  zap_scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create Docker network
        run: docker network create zap-net || true

      - name: Run vulnerable-api container
        run: |
          docker run -d --rm --network zap-net --name vulnerable-api \
            -p 8081:8081 \
            ghcr.io/pr0slittt/vulnerable-api-practika:latest

      - name: Wait for vulnerable-api to be ready
        run: |
          for i in {1..15}; do
            if curl -s http://localhost:8081; then
              echo "API is up"
              break
            else
              echo "Waiting for API..."
              sleep 2
            fi
          done

      - name: Show vulnerable-api logs
        run: docker logs vulnerable-api || echo "No logs"

      - name: Run OWASP ZAP baseline scan (игнорировать предупреждения)
        run: |
          docker pull ghcr.io/zaproxy/zaproxy:stable
          # ИСПРАВЛЕНО: Убран пробел после символа продолжения строки '\' перед '--user 0'
          docker run --rm --network zap-net \
          --user 0 \
          -v "/home/runner/work/vulnerable-api-practika/vulnerable-api-practika":/zap/wrk:rw \
          -v "/home/runner/work/vulnerable-api-practika/vulnerable-api-practika/zap-rules:/zap/scripts/:ro" \
          ghcr.io/zaproxy/zaproxy:stable \
          zap-baseline.py -t http://vulnerable-api:8081 -I \
          -r zap-report.html -J zap-report.json -x zap-report.xml

      - name: Upload ZAP scan reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: |
            zap-report.html
            zap-report.json
            zap-report.xml

      - name: Install Semgrep CLI
        run: |
          set -euxo pipefail
          pip install "semgrep>=1.76.0"
          semgrep --version

      - name: Run Semgrep SAST Scan
        id: semgrep_scan_run
        run: |
          set -euxo pipefail
          echo "Starting Semgrep CLI scan. PWD: $(pwd)"
          
          # Отладочный вывод: Список файлов в текущей директории и в папке app
          echo "Listing files in current directory (should contain semgrep-rules/):"
          ls -l .
          echo "Listing files in app/ directory:"
          ls -l ./app

          SARIF_OUTPUT_PATH="${{ github.workspace }}/semgrep-results.sarif"
          echo "Semgrep output path set to: $SARIF_OUTPUT_PATH"

          # Выполнение Semgrep с детальным логированием (используйте --debug или --verbose)
          # --verbose выводит информацию о загруженных правилах и пропусках
          semgrep \
            --config "p/python" \
            --config "p/security-audit" \
            --config "semgrep-rules/" \
            --sarif \
            -o "$SARIF_OUTPUT_PATH" \
            ./app \
            --verbose || true # <-- ДОБАВЛЕНО: --verbose для детального логирования
          
          SEMGREP_EXIT_CODE=$?
          echo "Semgrep scan finished. Raw exit code: $SEMGREP_EXIT_CODE"
          
          echo "semgrep_exit_code=$SEMGREP_EXIT_CODE" >> "$GITHUB_OUTPUT"

          if [ ! -f "$SARIF_OUTPUT_PATH" ]; then
            echo "ERROR: semgrep-results.sarif was NOT created by Semgrep!"
            exit 1
          else
            # Отладочный вывод: Размер SARIF-файла
            echo "Semgrep SARIF file created. Size: $(du -h "$SARIF_OUTPUT_PATH" | awk '{print $1}')"
            echo "First 100 lines of semgrep-results.sarif:"
            head -n 100 "$SARIF_OUTPUT_PATH"
          fi


      - name: Upload Semgrep SARIF results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'semgrep-results.sarif'
          wait-for-processing: true
          working-directory: ${{ github.workspace }}

      - name: Upload Semgrep SARIF as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-sarif-report
          path: semgrep-results.sarif
          retention-days: 5
