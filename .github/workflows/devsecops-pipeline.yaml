name: DevSecOps Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions:
  contents: read
  security-events: write

jobs:
  semgrep-sast:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          sudo apt-get update && sudo apt-get install -y jq # Устанавливаем jq
      - name: Install Semgrep CLI
        run: |
          pip install "semgrep>=1.76.0"
          semgrep --version
      - name: Run Semgrep SAST Scan (SARIF for Code Scanning)
        id: semgrep_scan_run
        run: |
          SARIF_OUTPUT_PATH="${{ github.workspace }}/semgrep-results.sarif"
          semgrep \
            --config "p/python" \
            --config "p/security-audit" \
            --config "semgrep-rules/" \
            --sarif \
            -o "$SARIF_OUTPUT_PATH" \
            ./app \
            --verbose || true
          echo "semgrep_exit_code=$?" >> "$GITHUB_OUTPUT"
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'semgrep-results.sarif'
          wait-for-processing: true

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-sarif-report
          path: semgrep-results.sarif
          retention-days: 5

      # НОВЫЙ ШАГ: Run Semgrep SAST Scan (JSON for Table Output)
      - name: Run Semgrep SAST Scan (JSON Output)
        id: semgrep_json_scan
        run: |
          JSON_OUTPUT_PATH="${{ github.workspace }}/semgrep-results.json"
          semgrep \
            --config "p/python" \
            --config "p/security-audit" \
            --config "semgrep-rules/" \
            --json \
            -o "$JSON_OUTPUT_PATH" \
            ./app \
            --verbose || true
          echo "semgrep_json_exit_code=$?" >> "$GITHUB_OUTPUT"
      # НОВЫЙ ШАГ: Format Semgrep JSON to Table and Save to File
      - name: Format Semgrep JSON to Table
        run: |
          if [ -s "${{ github.workspace }}/semgrep-results.json" ]; then
            echo "Category | Rule ID | Severity | File | Line | Description" > semgrep-table-report.txt
            echo "---------|---------|----------|------|------|-------------" >> semgrep-table-report.txt
            jq -r '.results[] | select(.extra.severity) | "\(.extra.metadata.category // "N/A") | \(.check_id) | \(.extra.severity) | \(.path) | \(.start.line) | \(.extra.message)"' "${{ github.workspace }}/semgrep-results.json" | \
            sed 's/\n/ /g' | \
            sed 's/|/ \| /g' | \
            column -t -s '|' >> semgrep-table-report.txt
            
            cat semgrep-table-report.txt # Выводим в лог
          else
            echo "No Semgrep results found or JSON file is empty."
            echo "No Semgrep results found." > semgrep-table-report.txt
          fi
        env:
          PYTHONUNBUFFERED: 1 # Для более предсказуемого вывода в логах

      - name: Upload Semgrep Table Report Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-table-report
          path: semgrep-table-report.txt
          retention-days: 5

  grype-sca:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: ~/.grype/db
          key: ${{ runner.os }}-grype-db-${{ hashFiles('grype-db-version.txt') }}
          restore-keys: ${{ runner.os }}-grype-db-

      - name: Create Grype DB Version File
        run: echo "1" > grype-db-version.txt

      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sudo bash -s -- -b /usr/local/bin
          grype version
      - name: Run Grype SCA Scan
        id: grype_scan_run
        run: |
          GRYPE_OUTPUT_PATH="${{ github.workspace }}/grype-results.sarif"
          grype dir:./app -o sarif --file "$GRYPE_OUTPUT_PATH" || true
          echo "grype_exit_code=$?" >> "$GITHUB_OUTPUT"
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'grype-results.sarif'
          wait-for-processing: true

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: grype-sarif-report
          path: grype-results.sarif
          retention-days: 5

  checkov_iac_scan:
    name: Checkov IaC Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Checkov IaC Scan
        id: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: dockerfile,kubernetes,terraform,cloudformation,arm,ansible,serverless
          output_format: sarif
          output_file_path: checkov_results.sarif/results_sarif.sarif

      - name: Upload SARIF report
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov_results.sarif/results_sarif.sarif
          category: Checkov
          checkout_path: ${{ github.workspace }}
          wait-for-processing: true

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: checkov-sarif-report
          path: checkov_results.sarif/results_sarif.sarif
          retention-days: 5

  docker-build-and-trivy:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-tag.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        id: set-tag
        run: |
          docker build -t vulnerable-api:latest .
          echo "IMAGE_TAG=vulnerable-api:latest" >> $GITHUB_ENV
      - name: Run Trivy Scan (Table Format and Save to File)
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo bash -s -- -b /usr/local/bin
          trivy image --format table ${{ env.IMAGE_TAG }} > trivy-table-report.txt
          cat trivy-table-report.txt
      - name: Upload Trivy Table Report Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-table-report
          path: trivy-table-report.txt
          retention-days: 5

      - name: Run Trivy Scan (SARIF Format for Code Scanning)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.IMAGE_TAG }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'LOW,MEDIUM,HIGH,CRITICAL'
        continue-on-error: true

      - name: Check if Trivy SARIF file exists
        run: |
          if [ ! -f trivy-results.sarif ]; then
            echo "ERROR: SARIF file not found!"
            exit 1
          fi
      - name: Upload Trivy SARIF report
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: Trivy
          checkout_path: ${{ github.workspace }}
          wait-for-processing: true

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-sarif-report
          path: trivy-results.sarif
          retention-days: 5

  zap-dast:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Create Docker network
        run: docker network create zap-net || true

      - name: Run vulnerable-api container
        run: |
          docker run -d --rm --network zap-net --name vulnerable-api \
            -p 8081:8081 \
            ghcr.io/pr0slittt/vulnerable-api-practika:latest
      - name: Wait for API readiness
        run: |
          for i in {1..15}; do
            if curl -s http://localhost:8081; then
              echo "API is up"
              break
            else
              echo "Waiting for API..."
              sleep 2
            fi
          done
      - name: Fix permissions for workspace folder
        run: sudo chmod -R a+w ${{ github.workspace }}

      - name: Run OWASP ZAP baseline scan manually
        run: |
          docker run --rm --network zap-net -v ${{ github.workspace }}:/zap/wrk/:rw ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t http://vulnerable-api:8081 \
            -r zap-report.html \
            -J zap-report.json \
            -x zap-report.xml \
            -I
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-reports
          path: |
            zap-report.html
            zap-report.json
            zap-report.xml
