name: DevSecOps Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions:
  contents: read
  security-events: write

jobs:
  semgrep-sast:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Semgrep CLI
        run: |
          pip install "semgrep>=1.76.0"
          semgrep --version

      - name: Run Semgrep SAST Scan
        id: semgrep_scan_run
        run: |
          SARIF_OUTPUT_PATH="${{ github.workspace }}/semgrep-results.sarif"
          semgrep \
            --config "p/python" \
            --config "p/security-audit" \
            --config "semgrep-rules/" \
            --sarif \
            -o "$SARIF_OUTPUT_PATH" \
            ./app \
            --verbose || true
          echo "semgrep_exit_code=$?" >> "$GITHUB_OUTPUT"

      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'semgrep-results.sarif'
          wait-for-processing: true

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-sarif-report
          path: semgrep-results.sarif
          retention-days: 5

  grype-sca:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v3
        with:
          path: ~/.grype/db
          key: ${{ runner.os }}-grype-db-${{ hashFiles('grype-db-version.txt') }}
          restore-keys: ${{ runner.os }}-grype-db-

      - name: Create Grype DB Version File
        run: echo "1" > grype-db-version.txt

      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sudo bash -s -- -b /usr/local/bin
          grype version

      - name: Run Grype SCA Scan
        id: grype_scan_run
        run: |
          GRYPE_OUTPUT_PATH="${{ github.workspace }}/grype-results.sarif"
          grype dir:./app -o sarif --file "$GRYPE_OUTPUT_PATH" || true
          echo "grype_exit_code=$?" >> "$GITHUB_OUTPUT"

      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'grype-results.sarif'
          wait-for-processing: true

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: grype-sarif-report
          path: grype-results.sarif
          retention-days: 5

  docker-build-and-trivy:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-tag.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        id: set-tag
        run: |
          docker build -t vulnerable-api:latest .
          echo "image_tag=vulnerable-api:latest" >> $GITHUB_OUTPUT

      - uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'vulnerable-api:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
        continue-on-error: true

      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          wait-for-processing: true

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-sarif-report
          path: trivy-results.sarif
          retention-days: 5

  zap-dast:
    runs-on: ubuntu-latest
    needs: docker-publish
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Create Docker network
        run: docker network create zap-net || true

      - name: Run vulnerable-api container
        run: |
          docker run -d --rm --network zap-net --name vulnerable-api \
            -p 8081:8081 \
            ${{ needs.docker-publish.outputs.image_tag }}

      - name: Wait for API readiness
        run: |
          for i in {1..15}; do
            if curl -s http://localhost:8081; then
              echo "API is up"
              break
            else
              echo "Waiting for API..."
              sleep 2
            fi
          done

      - name: Run OWASP ZAP baseline scan
        run: |
          docker pull ghcr.io/zaproxy/zaproxy:stable
          docker run --rm --network zap-net \
            --user 0 \
            -v "${{ github.workspace }}":/zap/wrk:rw \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t http://vulnerable-api:8081 -I \
            -r zap-report.html -J zap-report.json -x zap-report.xml

      - name: Upload ZAP reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: |
            zap-report.html
            zap-report.json
            zap-report.xml
