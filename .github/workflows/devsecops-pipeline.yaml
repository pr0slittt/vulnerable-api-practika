name: DevSecOps Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  build-and-security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Semgrep SAST Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: "p/python,p/security-audit,semgrep-rules/"
          sarif: semgrep-results.sarif
          output: semgrep-results.sarif
          continue-on-error: true

      - name: Upload Semgrep SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
          wait-for-processing: true

      - name: Upload Semgrep SARIF Artifact
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-sarif-report
          path: semgrep-results.sarif
          retention-days: 5

      - name: Cache Grype DB
        uses: actions/cache@v3
        with:
          path: ~/.grype/db
          key: ${{ runner.os }}-grype-db-${{ hashFiles('grype-db-version.txt') }}
          restore-keys: ${{ runner.os }}-grype-db-

      - name: Create Grype DB Version File
        run: echo "1" > grype-db-version.txt

      - name: Run Grype SCA Scan
        uses: anchore/grype-action@v1
        with:
          scan-path: ./app
          output: sarif
          output-file: grype-results.sarif
          continue-on-error: true

      - name: Upload Grype SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: grype-results.sarif
          wait-for-processing: true

      - name: Upload Grype SARIF Artifact
        uses: actions/upload-artifact@v4
        with:
          name: grype-sarif-report
          path: grype-results.sarif
          retention-days: 5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: vulnerable-api:latest

      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'vulnerable-api:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
        continue-on-error: true

      - name: Upload Trivy SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          wait-for-processing: true

      - name: Upload Trivy SARIF Artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-sarif-report
          path: trivy-results.sarif
          retention-days: 5

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create Docker network
        run: docker network create zap-net || true

      - name: Run vulnerable-api container
        run: |
          docker run -d --rm --network zap-net --name vulnerable-api \
            -p 8081:8081 \
            ghcr.io/pr0slittt/vulnerable-api-practika:latest

      - name: Wait for API readiness
        run: |
          for i in {1..15}; do
            if curl -s http://localhost:8081; then
              echo "API is up"
              break
            else
              echo "Waiting for API..."
              sleep 2
            fi
          done

      - name: Show vulnerable-api logs
        run: docker logs vulnerable-api || echo "No logs"

      - name: Run OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.6.0
        with:
          target: 'http://vulnerable-api:8081'
          report_format: 'all'
          report_name: 'zap-report'
          cmd_options: '-I'

      - name: Upload ZAP reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: |
            zap-report.html
            zap-report.json
            zap-report.xml
